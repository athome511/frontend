{"ast":null,"code":"var _jsxFileName = \"/Users/konchan/works/frontend/coorde-mate/src/components/SubmitRequest.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField'; //import ButtonComponent from '../public/ButtonComponent';\n\nimport { postEvent } from '../actions'; //css\n\nimport '../css/submitRequest.css'; //依頼投稿ページ\n\nclass SubmitRequest extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userData: []\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  renderField(field) {\n    const input = field.input,\n          label = field.label,\n          type = field.type,\n          _field$meta = field.meta,\n          touched = _field$meta.touched,\n          error = _field$meta.error;\n    return React.createElement(TextField, Object.assign({\n      hintText: label,\n      floatingLabelText: label,\n      type: type,\n      errorText: touched && error\n    }, input, {\n      fullWidth: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }));\n  }\n\n  async onSubmit(values) {\n    await this.props.postEvent(values);\n    this.props.history.push('/completed');\n  }\n\n  inputUserId() {\n    const userState = JSON.parse(localStorage.getItem('userData'));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"r_u_id\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), console.log(userData));\n  }\n\n  render() {\n    const _this$props = this.props,\n          handleSubmit = _this$props.handleSubmit,\n          pristine = _this$props.pristine,\n          submitting = _this$props.submitting;\n    const style = {\n      margin: 15\n    };\n    const form = {\n      width: '80%',\n      margin: 'auto',\n      alignItems: 'center'\n    };\n    const submit = {\n      textAlign: 'center'\n    };\n    const input = {\n      marginTop: 50\n    };\n    const displayNone = {\n      display: 'block'\n    };\n    return React.createElement(\"form\", {\n      onSubmit: handleSubmit(this.onSubmit),\n      style: form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"\\u4F9D\\u983C\\u30BF\\u30A4\\u30C8\\u30EB\",\n      name: \"r_title\",\n      type: \"String\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"\\u4F9D\\u983C\\u30E1\\u30E2\",\n      name: \"r_memo\",\n      type: \"text\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      style: input,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(Field, {\n      label: \"\\u4F9D\\u983C\\u671F\\u9650\",\n      name: \"r_limit\",\n      type: \"datetime\",\n      component: this.renderField,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), this.inputUserId(), React.createElement(\"div\", {\n      className: \"submitRequestButton\",\n      style: submit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(RaisedButton, {\n      label: \"Submit\",\n      type: \"submit\",\n      style: style,\n      disabled: pristine || submitting,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(RaisedButton, {\n      label: \"Cancel\",\n      style: style,\n      containerElement: React.createElement(Link, {\n        to: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst validate = values => {\n  const errors = {};\n  if (!values.r_title) errors.r_title = \"タイトルを１～１４文字で入力してください\";\n  if (!values.r_memo) errors.r_memo = \"メモは１４０文字までにしてください\";\n  if (!values.r_limit) errors.r_limit = \"期限を入力してください\";\n  return errors;\n};\n\nconst mapDispatchToProps = {\n  postEvent\n};\nexport default connect(null, mapDispatchToProps)(reduxForm({\n  validate,\n  form: 'requestNewForm'\n})(SubmitRequest));","map":{"version":3,"sources":["/Users/konchan/works/frontend/coorde-mate/src/components/SubmitRequest.js"],"names":["React","connect","Field","reduxForm","Link","RaisedButton","TextField","postEvent","SubmitRequest","Component","constructor","props","state","userData","onSubmit","bind","renderField","field","input","label","type","meta","touched","error","values","history","push","inputUserId","userState","JSON","parse","localStorage","getItem","console","log","render","handleSubmit","pristine","submitting","style","margin","form","width","alignItems","submit","textAlign","marginTop","displayNone","display","validate","errors","r_title","r_memo","r_limit","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport TextField from 'material-ui/TextField';\n\n\n//import ButtonComponent from '../public/ButtonComponent';\nimport { postEvent } from '../actions';\n\n//css\nimport '../css/submitRequest.css';\n\n//依頼投稿ページ\nclass SubmitRequest extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { userData: [] }\n    this.onSubmit = this.onSubmit.bind(this)\n  }\n\n\n  renderField(field) {\n    const { input, label, type, meta: { touched, error } } = field\n\n    return(\n      <TextField\n        hintText={label}\n        floatingLabelText={label}\n        type={type}\n        errorText={touched && error}\n        {...input}\n        fullWidth={true}\n      />\n    )\n  }\n\n\n  async onSubmit(values) {\n    await this.props.postEvent(values)\n    this.props.history.push('/completed')\n  }\n\n\n  inputUserId() {\n    const userState = JSON.parse(localStorage.getItem('userData'))\n\n    return (\n      <div>\n        <Field name=\"r_u_id\" type=\"text\" component={this.renderField} />\n        {console.log(userData)}\n      </div>\n    )\n  }\n\n\n  render() {\n    const { handleSubmit, pristine, submitting } = this.props\n    const style = { margin: 15}\n    const form = {\n      width: '80%',\n      margin: 'auto',\n      alignItems: 'center'\n    }\n    const submit = {\n      textAlign: 'center'\n    }\n    const input = {\n      marginTop: 50\n    }\n    const displayNone = {\n      display: 'block'\n    }\n\n    return (\n      <form onSubmit={handleSubmit(this.onSubmit)} style={form}>\n\n        <div style={input}><Field label=\"依頼タイトル\" name=\"r_title\" type=\"String\" component={this.renderField} /></div>\n\n        <div style={input}><Field label=\"依頼メモ\" name=\"r_memo\" type=\"text\" component={this.renderField} /></div>\n\n        <div style={input}><Field label=\"依頼期限\" name=\"r_limit\" type=\"datetime\" component={this.renderField} /></div>\n\n\n        {this.inputUserId()}\n\n\n        <div className=\"submitRequestButton\" style={submit}>\n          <RaisedButton label=\"Submit\" type=\"submit\" style={style} disabled={pristine || submitting} />\n          <RaisedButton label=\"Cancel\" style={style} containerElement={<Link to=\"/\" />} />\n        </div>\n      </form>\n\n    );\n  }\n}\n\nconst validate = values => {\n  const errors = {}\n\n  if (!values.r_title) errors.r_title = \"タイトルを１～１４文字で入力してください\"\n  if (!values.r_memo) errors.r_memo = \"メモは１４０文字までにしてください\"\n  if (!values.r_limit) errors.r_limit = \"期限を入力してください\"\n\n  return errors\n}\n\nconst mapDispatchToProps = ({ postEvent })\n\nexport default connect(null, mapDispatchToProps)(\n  reduxForm({ validate, form: 'requestNewForm' })(SubmitRequest)\n)\n"]},"metadata":{},"sourceType":"module"}